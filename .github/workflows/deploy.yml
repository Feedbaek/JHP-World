name: Deploy to Server Instance using SSH

on:
  push:
    branches: [ 'main' ]

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build
        run: |
          docker build -t ${{ secrets.APPLICATION_NAME }} .
          docker tag ${{ secrets.APPLICATION_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:${GITHUB_SHA::7}
          docker tag ${{ secrets.APPLICATION_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker system prune -a
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest
            
            if [ "$(docker ps -aq -f name=${{ secrets.APPLICATION_NAME }})" ]
            then
              echo "[ ${{ secrets.APPLICATION_NAME }} is running ]"
              docker stop ${{ secrets.APPLICATION_NAME }}
              docker rm ${{ secrets.APPLICATION_NAME }}
            else
              echo "[ ${{ secrets.APPLICATION_NAME }} is not running ]"
            fi
            
            echo "${{ secrets.ENV_LIST }}" > env.list
            
            docker run --env-file env.list -d --name ${{ secrets.APPLICATION_NAME }} \
              -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} ${{ secrets.APPLICATION_NAME }}:latest